spring.profiles.active=alpha
# security 使能
security.basic.enabled=false
#spring.security.user.name=admin
#spring.security.user.password=admin
# Redis配置
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=localhost
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=foobared
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=0

#logback 日志配置
spring.logback.path="D://log/"

#对于rabbitMQ的支持
#访问地址：http://localhost:15672/#/queues
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=admin
spring.rabbitmq.password=admin
spring.rabbitmq.virtual-host=/
#  消息发送到交换机确认机制,是否确认回调
spring.rabbitmq.publisher-confirms=true
## 最大重试次数 (无效)
#spring.rabbitmq.listener.simple.retry.max-attempts = 5
## 是否开启消费者重试（为false时关闭消费者重试，这时消费端代码异常会一直重复收到消息）
#spring.rabbitmq.listener.simple.retry.enabled = true
## 重试间隔时间（单位毫秒）
#spring.rabbitmq.listener.simple.retry.initial-interval = 5000
## 重试次数超过上面的设置之后是否丢弃（false不丢弃时需要写相应代码将该消息加入死信队列）
#spring.rabbitmq.listener.simple.default-requeue-rejected = true
spring.rabbitmq.dingTalk.text.url=https://oapi.dingtalk.com/robot/send?access_token=ef868a8ce6b89a617dc6e1e13a928d1f2b59636291560ad2fe800b6c396cb8c1X
spring.rabbitmq.dingTalk.link.url=https://oapi.dingtalk.com/robot/send?access_token=ef868a8ce6b89a617dc6e1e13a928d1f2b59636291560ad2fe800b6c396cb8c1X
spring.rabbitmq.dingTalk.markdown.url=https://oapi.dingtalk.com/robot/send?access_token=ef868a8ce6b89a617dc6e1e13a928d1f2b59636291560ad2fe800b6c396cb8c1

#动态html访问资源路径
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML5
spring.thymeleaf.encoding=UTF-8
# ;charset=<encoding> is added
spring.thymeleaf.content-type=text/html
# set to false for hot refresh
spring.thymeleaf.cache=false
server.tomcat.uri-encoding=utf-8
server.context-path=/springboot/

# https配置
#server.port=8443
server.port=8090
#配置http跳转https端口
server.http.port=8091
server.ssl.enabled=true
server.ssl.keyAlias=springboot
server.ssl.keyPassword=123456
server.ssl.keyStorePassword=123456
server.ssl.keyStore=classpath:config/server.jks
server.ssl.keyStoreType=JKS

##kafka配置信息
kafka.listener.topics=queue_performance
kafka.listener.group=idbhn_test

kafka.producer.bootstrap-servers=10.1.207.206:9092
#一次最多发送数据量
kafka.producer.batch-size=16785
#发送失败后的重复发送次数
kafka.producer.retries=1
#32M批处理缓冲区
kafka.producer.buffer-memory=33554432
kafka.producer.linger=1
kafka.consumer.bootstrap-servers=172.27.0.9:9092
#最早未被消费的offset earliest
kafka.consumer.auto-offset-reset=latest
#批量消费一次最大拉取的数据量
kafka.consumer.max-poll-records=3100
#是否开启自动提交
kafka.consumer.enable-auto-commit=false
#自动提交的间隔时间
kafka.consumer.auto-commit-interval=1000
#连接超时时间
kafka.consumer.session-timeout=20000
#手动提交设置与poll的心跳数,如果消息队列中没有消息，等待毫秒后，调用poll()方法。
# 如果队列中有消息，立即消费消息，每次消费的消息的多少可以通过max.poll.records配置。
kafka.consumer.max-poll-interval=15000
#设置拉取数据的大小,15M
kafka.consumer.max-partition-fetch-bytes=15728640
#是否开启批量消费，true表示批量消费
kafka.listener.batch-listener=true
#设置消费的线程数 3,10 3个broker，每个broker 10个线程
kafka.listener.concurrencys=1,10
#只限自动提交，
kafka.listener.poll-timeout=1500

# RSA秘钥对
rsa.public.key=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCWkYRBmAvs3Jg/mhZobd4SKYsOkXuwNcZuxgFFazOYoRtjvXLjqBejNx+BOcJu9q8YHfZvZU7qM5/5FWbAp9aTV3bHLor9gEAheUMd+PRA2g5x2lFB7ANEaNRh2Boc0YB7A7k9ADJT3gfsFRSCLpO9phsuUophwHT3G27CxUQclQIDAQAB
rsa.private.key=MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAJaRhEGYC+zcmD+aFmht3hIpiw6Re7A1xm7GAUVrM5ihG2O9cuOoF6M3H4E5wm72rxgd9m9lTuozn/kVZsCn1pNXdscuiv2AQCF5Qx349EDaDnHaUUHsA0Ro1GHYGhzRgHsDuT0AMlPeB+wVFIIuk72mGy5SimHAdPcbbsLFRByVAgMBAAECgYBan4jfxfjffkIwfbig8AeqHNDyWsP8YdFmGMzpEEXExqrqlDsTJLfdZ68Ro0cQbG8kb9xEXdBqi9nsHGJ08E/oACfEi5NGfzpq34YZMMe/QIn0KU5gei+e4ekOIgJZaLlMDNpdYUj1JckJE4Q0k1T+pJrYybiwUKlBXVisuXhW3QJBAM6NxcKdxAHvYrpWnS0QCxWgG9kDPWn9gCcWotlB3TXRaYOdXHhPkcf3JOuYt9J7gzQPJ2Q3U00Pf2Sn6IDodVsCQQC6nMt7Bg/ArT2ZxmU4lKlJ0Cs9j7YXapUmCRu2QBl6hzHpJ3XWL5+c2y8dtxviXryCOTb5HUKb6PgGW4ULlSjPAkACmAcuvXpzp8TuoB3TLgtllyAiZocD6LoOQ5uB7PDRNzMDAxvhKuaiwzjEeKN+UizAn5wYBxXVtucbpXwm+kRXAkBMRvLVYnDl7OoVBQcyzXE0/qXuD+P6RlKYrXhqUmEXuFMqXjrIRccUMnNbzhDTwq2C/Sf/Q3qKh/t5fccwKNP5AkBEfNRa7go2jGeS76neoYMGgaxwfznR+xjEINTr2kNBXp9QpSbq38HNLpQ6DDtYCYte/cK9il9ipt9IHlFxYwzy
# SIGN秘钥对
sign.public.key=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCTpIbbVB3HB55eQZRFtzej1GLFB7pT8DgFr1nqVQOM8Xhew8Gum1ADCfmCX8GmnwrJ9lUUJ6PFb+IACrSD1F83EoOSBA8shmTOqGf5zG8LrzWpzBp8Bo5Yq9kcpLOEJRdizltxsaVDoFDNqFJB5vkQK3nQ+2z/ARfxOegzCw+olQIDAQAB
sign.private.key=MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAJOkhttUHccHnl5BlEW3N6PUYsUHulPwOAWvWepVA4zxeF7Dwa6bUAMJ+YJfwaafCsn2VRQno8Vv4gAKtIPUXzcSg5IEDyyGZM6oZ/nMbwuvNanMGnwGjlir2Ryks4QlF2LOW3GxpUOgUM2oUkHm+RAredD7bP8BF/E56DMLD6iVAgMBAAECgYAW33FI/1IRqHt/bLd0yXqkNd4LWjQilt+G+fB7HiqLpkkYnUkfLM6LefsemIkesBryyOfLVIzJpJilmwL2PWt2lsc625UxlMSNJHSapxUgeD9tqtc4+Sw1aALBzRkHr0LayGxZrFgPBE7olJ6rkmK528/c7At4OF4UsEW4vb9ObQJBAOJU+WT6npI5zMHejunRfo+mmzSTSs5miROUA5QIz+580H0ti23sfiikymMygC+ltPI5ye2UvH9W/LtPtXoOwmcCQQCm/vnGypjY6HgnslzZSq7ziY/8COYfFoZKoZaitjt68iomcBWZboGhyBQ50l6Sh9Irt5Mr/biwpQQrOiN21HejAkEAyXhesFavhPbSn9jfWp/Ti0gBbKGYu3Zmmvjs3n+hqGeOp389WFJmUwOt7PNtS/yzv9NVPplh2fCy9IIVx1sQDQJAY8BMnQUpte9uzm+JbLZiuNCD9E2wgANpZi0NmNX3w6HhsaIkFMlgn62u/zb9DNQao8h9Hbrp1oJLcjLBOlsBtwJAM9f1lBBM9ikRNBB0Q77NGEYPolEdXwWQpe8nyTr1is3OQDEn4UyHcnAxAY89igIZZYCxGyIGGeoF19hQQ/r+gQ==